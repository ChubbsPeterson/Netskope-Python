from base_client import BaseClient

class Events(BaseClient):

    def __init__(self, base_url, auth_token, headers=None, timeout=10):
        super().__init__(base_url, headers, timeout)
        self.headers.update({
            'Netskope-Api-Token': auth_token,
            'accept': 'application/json'
        })

    def get_alerts(self, display_output=False):
        """
        Get alerts generated by Netskope
        """
        endpoint = "events/data/alert"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def get_application_events(self, display_output=False):
        """
        Get application events generated by Netskope
        """
        endpoint = "events/data/application"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def get_audit_events(self, display_output=False):
        """
        Get audit events generated by Netskope
        """
        endpoint = "events/data/audit"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def export_alerts_uba(self, display_output=False):
        """
        Export alerts generated by Netskope of type UBA
        """
        endpoint = "events/dataexport/alerts/uba"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def get_infrastructure_events(self, display_output=False):
        """
        Get infrastructure events generated by Netskope
        """
        endpoint = "events/data/infrastructure"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def get_network_events(self, display_output=False):
        """
        Get network events generated by Netskope
        """
        endpoint = "events/data/network"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def get_page_events(self, display_output=False):
        """
        Get page events generated by Netskope
        """
        endpoint = "events/data/page"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def retrieve_subscription_key_and_path(self, display_output=False):
        """
        Retrieve subscription key and path for Netskope transaction events
        """
        endpoint = "events/token/transaction_events"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def export_alerts_security_assessment(self, display_output=False):
        """
        Export alerts generated by Netskope of type Security Assessment
        """
        endpoint = "events/dataexport/alerts/securityassessment"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def export_alerts_quarantine(self, display_output=False):
        """
        Export alerts generated by Netskope of type quarantine
        """
        endpoint = "events/dataexport/alerts/quarantine"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def export_alerts_remediation(self, display_output=False):
        """
        Export alerts generated by Netskope of type remediation
        """
        endpoint = "events/dataexport/alerts/remediation"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def export_alerts_policy(self, display_output=False):
        """
        Export alerts generated by Netskope of type policy
        """
        endpoint = "events/dataexport/alerts/policy"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def export_alerts_malware(self, display_output=False):
        """
        Export alerts generated by Netskope of type malware
        """
        endpoint = "events/dataexport/alerts/malware"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def export_alerts_malsite(self, display_output=False):
        """
        Export alerts generated by Netskope of type malsite
        """
        endpoint = "events/dataexport/alerts/malsite"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def export_alerts_compromised_credential(self, display_output=False):
        """
        Export alerts generated by Netskope of type Compromised Credential
        """
        endpoint = "events/dataexport/alerts/compromisedcredential"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def export_alerts_ctep(self, display_output=False):
        """
        Export alerts generated by Netskope of type ctep/ips/c2
        """
        endpoint = "events/dataexport/alerts/ctep"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def export_alerts_dlp(self, display_output=False):
        """
        Export alerts generated by Netskope of type DLP
        """
        endpoint = "events/dataexport/alerts/dlp"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def export_alerts_watchlist(self, display_output=False):
        """
        Export alerts generated by Netskope of type watchlist
        """
        endpoint = "events/dataexport/alerts/watchlist"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def get_infrastructure_events(self, display_output=False):
        """
        Get infrastructure events generated by Netskope
        """
        endpoint = "events/data/infrastructure"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def get_network_events(self, display_output=False):
        """
        Get network events generated by Netskope
        """
        endpoint = "events/data/network"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def get_page_events(self, display_output=False):
        """
        Get page events generated by Netskope
        """
        endpoint = "events/data/page"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)

    def retrieve_transaction_events_token(self, display_output=False):
        """
        Retrieve subscription key and path for Netskope transaction events
        """
        endpoint = "events/token/transaction_events"
        response = self.get(endpoint, display_output=display_output)
        return self._handle_response(response)